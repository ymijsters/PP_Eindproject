--should print 1,2,3,1
import Sprockell.System
prog :: [Instruction]
prog = [Const 1 RegA, 
	Compute Sub Zero RegA RegA, 
	Push RegA, 
	Const 2 RegA, 
	Pop RegB, 
	Compute Add RegB RegA RegA, 
	Store RegA (Addr 0), 
	Load (Addr 0) RegA, 
	Const 48 RegB, 
	Compute Add RegA RegB RegA, 
	Write RegA (Addr 16777216), 
	Const 10 RegA, 
	Write RegA (Addr 16777216), 
	Load (Addr 0) RegA, 
	Const 1 RegB, 
	Compute Add RegA RegB RegB, 
	Store RegB (Addr 0), 
	Load (Addr 0) RegA, 
	Const 48 RegB, 
	Compute Add RegA RegB RegA, 
	Write RegA (Addr 16777216), 
	Const 10 RegA, 
	Write RegA (Addr 16777216), 
	Load (Addr 0) RegA, 
	Const 1 RegB, 
	Compute Sub RegA RegB RegB, 
	Store RegB (Addr 0), 
	Load (Addr 0) RegA, 
	Const 1 RegB, 
	Compute Add RegA RegB RegB, 
	Store RegB (Addr 0), 
	Load (Addr 0) RegA, 
	Const 1 RegB, 
	Compute Add RegA RegB RegB, 
	Store RegB (Addr 0), 
	Load (Addr 0) RegA, 
	Const 48 RegB, 
	Compute Add RegA RegB RegA, 
	Write RegA (Addr 16777216), 
	Const 10 RegA, 
	Write RegA (Addr 16777216), 
	Const 33 RegA, 
	Push RegA, 
	Const 3 RegA, 
	Pop RegB, 
	Compute Sub RegB RegA RegA, 
	Push RegA, 
	Const 1 RegA, 
	Pop RegB, 
	Compute Add RegB RegA RegA, 
	Store RegA (Addr 1), 
	Const 0 RegA, 
	Push RegA, 
	Const 0 RegA, 
	Push RegA, 
	Const 0 RegA, 
	Pop RegB, 
	Compute Or RegA RegB RegA, 
	Compute Equal RegA Zero RegA, 
	Pop RegB, 
	Compute Or RegA RegB RegA, 
	Store RegA (Addr 2), 
	Const 1 RegA, 
	Push RegA, 
	Load (Addr 2) RegA, 
	Pop RegB, 
	Compute And RegA RegB RegA, 
	Const 48 RegB, 
	Compute Add RegA RegB RegA, 
	Write RegA (Addr 16777216), 
	Const 10 RegA, 
	Write RegA (Addr 16777216), 
	EndProg]
main = run 1 prog
