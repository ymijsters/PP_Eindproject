import Sprockell.System
prog :: [Instruction]
prog = [Store Zero (Addr 0), 
	Const 33 RegA, 
	Push RegA, 
	Const 3 RegA, 
	Pop RegB, 
	Compute Sub RegB RegA RegA, 
	Push RegA, 
	Const 1 RegA, 
	Pop RegB, 
	Compute Add RegB RegA RegA, 
	Store RegA (Addr 1), 
	Const 0 RegA, 
	Push RegA, 
	Const 0 RegA, 
	Push RegA, 
	Const 0 RegA, 
	Pop RegB, 
	Compute Or RegA RegB RegA, 
	Compute Equal RegA Zero RegA, 
	Pop RegB, 
	Compute Or RegA RegB RegA, 
	Store RegA (Addr 2), 
	Const 0 RegA, 
	Store RegA (Addr 0), 
	Load (Addr 1) RegA, 
	Push RegA, 
	Load (Addr 0) RegA, 
	Pop RegB, 
	Compute Gt RegB RegA RegA, 
	Push RegA, 
	Const 0 RegA, 
	Push RegA, 
	Load (Addr 2) RegA, 
	Pop RegB, 
	Compute And RegA RegB RegA, 
	Compute Equal RegA Zero RegA, 
	Pop RegB, 
	Compute Or RegA RegB RegA, 
	Branch RegA (Abs 40), 
	Jump (Abs 65), 
	Load (Addr 0) RegA, 
	Push RegA, 
	Load (Addr 0) RegA, 
	Pop RegB, 
	Compute Sub RegB RegA RegA, 
	Push RegA, 
	Const 1 RegA, 
	Pop RegB, 
	Compute Add RegB RegA RegA, 
	Push RegA, 
	Load (Addr 1) RegA, 
	Pop RegB, 
	Compute Add RegB RegA RegA, 
	Push RegA, 
	Load (Addr 0) RegA, 
	Pop RegB, 
	Compute Add RegB RegA RegA, 
	Store RegA (Addr 0), 
	Load (Addr 0) RegA, 
	Push RegA, 
	Load (Addr 0) RegA, 
	Pop RegB, 
	Compute Add RegB RegA RegA, 
	Store RegA (Addr 0), 
	Jump (Abs 24), 
	EndProg]
main = run 1 prog
